snippet yorg.test
# -*- coding: utf-8 -*-
# pylint: disable=line-too-long


from unittest.mock import patch
from tests.utils import read_bytes


def test_parse_detail_page_success(mongo):
    db_coll = mongo('$1', 'case_detail')
    from $2 import parse_content_page
    with patch("$2") as mock_download:
        mock_download.return_value = read_bytes("$3")
        parse_content_page("$4")
        assert db_coll.count() == 1
        data = db_coll.find_one({'hash': "4d72e935b746cced7be03fa44bdb78b1"})
        assert data is not None
        data.pop("_id")
        data.pop("updated_at")
        assert data == $4
endsnippet

snippet with "with" b
with ${1:expr}`!p snip.rv = " as " if t[2] else ""`${2:var}:
    ${3:${VISUAL:pass}}
$0
endsnippet


snippet noqa
# noqa, pylint:disable=line-too-long
endsnippet


snippet Task
class Task(Task):
    def __init__(self):
        super().__init__()

    def download(self):
        res = download(self.url)
        return DownloadResult(res, url=url)

    @staticmethod
    def extract(download_result):
        url = download_result.url
        resp = download_result.response
        lxml_page = lxml.html.fromstring(resp.content.decode())

        yield NextTask(...)
        yield UpdateMongo(...)
endsnippet
